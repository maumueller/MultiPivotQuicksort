    // Automatically generated by invoking
    // ruby gen_k_pivot_algorithm.rb with parameters
    //  1 0 0 
    #include <algorithm>

    namespace qsort100{

    template <typename Iterator>
    void sort(Iterator left, Iterator right)
    {
        typedef typename std::iterator_traits<Iterator>::value_type value_type;
        if (right - left < 500)
        {
            qsort3::three_pivot(left, right);
        }
        else
        {
        value_type p1 = *(left + 0);


        Iterator i = left + 1;
        Iterator j = right - 0;

        while (i <= j)
        {
            while (*i < p1)
            {
                    i++; 
            }
            while (*j > p1)
            {
                    j--; 
            }
            if (i <= j)
            {
                // rotate a1 and a0 elements
                rotations::rotate2(*i, *j);
                i++, j--;
            }
        }
        rotations::rotate2(*(left + 0), *(i - 1));


        sort(left, i - 2);
        sort(i - 0, right);
    }
}

template <typename ValueType>
void qsort()
{
    assert( g_input_size % sizeof(ValueType) == 0 );

    ValueType* input = (ValueType*)g_input;
    size_t n = g_input_size / sizeof(ValueType);

    sort(input, input + n - 1);
}

CONTESTANT_REGISTER_ALL(qsort, "qsort100", "Quicksort, 1 pivots");

} // namespace
