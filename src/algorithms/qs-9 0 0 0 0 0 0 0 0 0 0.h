    // Automatically generated by invoking
    // ruby gen_k_pivot_algorithm.rb with parameters
    //  9 0 0 0 0 0 0 0 0 0 0 
    #include <algorithm>

    namespace qsort90000000000{

    template <typename Iterator>
    void sort(Iterator left, Iterator right)
    {
        typedef typename std::iterator_traits<Iterator>::value_type value_type;
        if (right - left < 500)
        {
            qsort3::three_pivot(left, right);
        }
        else
        {
        networks::sort9(*(left +  0), *(left +  1), *(left +  2), *(left +  3), *(left +  4), *(right - 3), *(right - 2), *(right - 1), *(right - 0));

        value_type p1 = *(left + 0);
        value_type p2 = *(left + 1);
        value_type p3 = *(left + 2);
        value_type p4 = *(left + 3);
        value_type p5 = *(left + 4);
        value_type p6 = *(right - 3);
        value_type p7 = *(right - 2);
        value_type p8 = *(right - 1);
        value_type p9 = *(right - 0);

        Iterator g1 = left + 5;
        Iterator g2 = left + 5;
        Iterator g3 = left + 5;
        Iterator g4 = left + 5;
        Iterator g8 = right - 4;
        Iterator g7 = right - 4;
        Iterator g6 = right - 4;
        Iterator g5 = right - 4;

        Iterator i = left + 5;
        Iterator j = right - 4;

        while (i <= j)
        {
            while (*i < p5)
            {
                if (*i > p4)
                {
                    i++; 
                }
                else
                {
                    if (*i > p3)
                    {
                        rotations::rotate2(*i, *g4);
                        i++; g4++; 
                    }
                    else
                    {
                        if (*i > p2)
                        {
                            rotations::rotate3(*i, *g4, *g3);
                            i++; g4++; g3++; 
                        }
                        else
                        {
                            if (*i > p1)
                            {
                                rotations::rotate4(*i, *g4, *g3, *g2);
                                i++; g4++; g3++; g2++; 
                            }
                            else
                            {
                                    rotations::rotate5(*i, *g4, *g3, *g2, *g1);
                                    i++; g4++; g3++; g2++; g1++; 
                            }
                        }
                    }
                }
            }
            while (*j > p5)
            {
                if (*j < p6)
                {
                    j--; 
                }
                else
                {
                    if (*j < p7)
                    {
                        rotations::rotate2(*j, *g5);
                        j--; g5--; 
                    }
                    else
                    {
                        if (*j < p8)
                        {
                            rotations::rotate3(*j, *g5, *g6);
                            j--; g5--; g6--; 
                        }
                        else
                        {
                            if (*j < p9)
                            {
                                rotations::rotate4(*j, *g5, *g6, *g7);
                                j--; g5--; g6--; g7--; 
                            }
                            else
                            {
                                    rotations::rotate5(*j, *g5, *g6, *g7, *g8);
                                    j--; g5--; g6--; g7--; g8--; 
                            }
                        }
                    }
                }
            }
            if (i <= j)
            {
                if (*i < p6)
                {
                    if (*j > p4)
                    {
                        // rotate a5 and a4 elements
                        rotations::rotate2(*i, *j);
                        i++, j--;
                    }
                    else
                    {
                        if (*j > p3)
                        {
                            // rotate a5 and a3 elements
                            rotations::rotate3(*i, *g4, *j);
                            i++, j--, g4++;
                        }
                        else
                        {
                            if (*j > p2)
                            {
                                // rotate a5 and a2 elements
                                rotations::rotate4(*i, *g4, *g3, *j);
                                i++, j--, g4++, g3++;
                            }
                            else
                            {
                                if (*j > p1)
                                {
                                    // rotate a5 and a1 elements
                                    rotations::rotate5(*i, *g4, *g3, *g2, *j);
                                    i++, j--, g4++, g3++, g2++;
                                }
                                else
                                {
                                    // rotate a5 and a0 elements
                                    rotations::rotate6(*i, *g4, *g3, *g2, *g1, *j);
                                    i++, j--, g4++, g3++, g2++, g1++;
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (*i < p7)
                    {
                        if (*j > p4)
                        {
                            // rotate a6 and a4 elements
                            rotations::rotate3(*i, *j, *g5);
                            i++, j--, g5--;
                        }
                        else
                        {
                            if (*j > p3)
                            {
                                // rotate a6 and a3 elements
                                rotations::rotate4(*i, *g4, *j, *g5);
                                i++, j--, g4++, g5--;
                            }
                            else
                            {
                                if (*j > p2)
                                {
                                    // rotate a6 and a2 elements
                                    rotations::rotate5(*i, *g4, *g3, *j, *g5);
                                    i++, j--, g4++, g3++, g5--;
                                }
                                else
                                {
                                    if (*j > p1)
                                    {
                                        // rotate a6 and a1 elements
                                        rotations::rotate6(*i, *g4, *g3, *g2, *j, *g5);
                                        i++, j--, g4++, g3++, g2++, g5--;
                                    }
                                    else
                                    {
                                        // rotate a6 and a0 elements
                                        rotations::rotate7(*i, *g4, *g3, *g2, *g1, *j, *g5);
                                        i++, j--, g4++, g3++, g2++, g1++, g5--;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (*i < p8)
                        {
                            if (*j > p4)
                            {
                                // rotate a7 and a4 elements
                                rotations::rotate4(*i, *j, *g5, *g6);
                                i++, j--, g5--, g6--;
                            }
                            else
                            {
                                if (*j > p3)
                                {
                                    // rotate a7 and a3 elements
                                    rotations::rotate5(*i, *g4, *j, *g5, *g6);
                                    i++, j--, g4++, g5--, g6--;
                                }
                                else
                                {
                                    if (*j > p2)
                                    {
                                        // rotate a7 and a2 elements
                                        rotations::rotate6(*i, *g4, *g3, *j, *g5, *g6);
                                        i++, j--, g4++, g3++, g5--, g6--;
                                    }
                                    else
                                    {
                                        if (*j > p1)
                                        {
                                            // rotate a7 and a1 elements
                                            rotations::rotate7(*i, *g4, *g3, *g2, *j, *g5, *g6);
                                            i++, j--, g4++, g3++, g2++, g5--, g6--;
                                        }
                                        else
                                        {
                                            // rotate a7 and a0 elements
                                            rotations::rotate8(*i, *g4, *g3, *g2, *g1, *j, *g5, *g6);
                                            i++, j--, g4++, g3++, g2++, g1++, g5--, g6--;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (*i < p9)
                            {
                                if (*j > p4)
                                {
                                    // rotate a8 and a4 elements
                                    rotations::rotate5(*i, *j, *g5, *g6, *g7);
                                    i++, j--, g5--, g6--, g7--;
                                }
                                else
                                {
                                    if (*j > p3)
                                    {
                                        // rotate a8 and a3 elements
                                        rotations::rotate6(*i, *g4, *j, *g5, *g6, *g7);
                                        i++, j--, g4++, g5--, g6--, g7--;
                                    }
                                    else
                                    {
                                        if (*j > p2)
                                        {
                                            // rotate a8 and a2 elements
                                            rotations::rotate7(*i, *g4, *g3, *j, *g5, *g6, *g7);
                                            i++, j--, g4++, g3++, g5--, g6--, g7--;
                                        }
                                        else
                                        {
                                            if (*j > p1)
                                            {
                                                // rotate a8 and a1 elements
                                                rotations::rotate8(*i, *g4, *g3, *g2, *j, *g5, *g6, *g7);
                                                i++, j--, g4++, g3++, g2++, g5--, g6--, g7--;
                                            }
                                            else
                                            {
                                                // rotate a8 and a0 elements
                                                rotations::rotate9(*i, *g4, *g3, *g2, *g1, *j, *g5, *g6, *g7);
                                                i++, j--, g4++, g3++, g2++, g1++, g5--, g6--, g7--;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (*j > p4)
                                {
                                    // rotate a9 and a4 elements
                                    rotations::rotate6(*i, *j, *g5, *g6, *g7, *g8);
                                    i++, j--, g5--, g6--, g7--, g8--;
                                }
                                else
                                {
                                    if (*j > p3)
                                    {
                                        // rotate a9 and a3 elements
                                        rotations::rotate7(*i, *g4, *j, *g5, *g6, *g7, *g8);
                                        i++, j--, g4++, g5--, g6--, g7--, g8--;
                                    }
                                    else
                                    {
                                        if (*j > p2)
                                        {
                                            // rotate a9 and a2 elements
                                            rotations::rotate8(*i, *g4, *g3, *j, *g5, *g6, *g7, *g8);
                                            i++, j--, g4++, g3++, g5--, g6--, g7--, g8--;
                                        }
                                        else
                                        {
                                            if (*j > p1)
                                            {
                                                // rotate a9 and a1 elements
                                                rotations::rotate9(*i, *g4, *g3, *g2, *j, *g5, *g6, *g7, *g8);
                                                i++, j--, g4++, g3++, g2++, g5--, g6--, g7--, g8--;
                                            }
                                            else
                                            {
                                                // rotate a9 and a0 elements
                                                rotations::rotate10(*i, *g4, *g3, *g2, *g1, *j, *g5, *g6, *g7, *g8);
                                                i++, j--, g4++, g3++, g2++, g1++, g5--, g6--, g7--, g8--;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        rotations::rotate6(*(left + 4), *(g1 - 1), *(g2 - 1), *(g3 - 1), *(g4 - 1), *(i - 1));
        rotations::rotate5(*(left + 3), *(g1 - 2), *(g2 - 2), *(g3 - 2), *(g4 - 2));
        rotations::rotate4(*(left + 2), *(g1 - 3), *(g2 - 3), *(g3 - 3));
        rotations::rotate3(*(left + 1), *(g1 - 4), *(g2 - 4));
        rotations::rotate2(*(left + 0), *(g1 - 5));

        rotations::rotate5(*(right - 3), *(g8 + 1), *(g7 + 1), *(g6 + 1), *(g5 + 1));
        rotations::rotate4(*(right - 2), *(g8 + 2), *(g7 + 2), *(g6 + 2));
        rotations::rotate3(*(right - 1), *(g8 + 3), *(g7 + 3));
        rotations::rotate2(*(right - 0), *(g8 + 4));

        sort(left, g1 - 6);
        sort(g1 - 4, g2 - 5);
        sort(g2 - 3, g3 - 4);
        sort(g3 - 2, g4 - 3);
        sort(g4 - 1, i - 2);
        sort(i - 0, g5 + 0);
        sort(g5 + 2, g6 + 1);
        sort(g6 + 3, g7 + 2);
        sort(g7 + 4, g8 + 3);
        sort(g8 + 5, right);
    }
}

template <typename ValueType>
void qsort()
{
    assert( g_input_size % sizeof(ValueType) == 0 );

    ValueType* input = (ValueType*)g_input;
    size_t n = g_input_size / sizeof(ValueType);

    sort(input, input + n - 1);
}

CONTESTANT_REGISTER_ALL(qsort, "qsort90000000000", "Quicksort, 9 pivots");

} // namespace
