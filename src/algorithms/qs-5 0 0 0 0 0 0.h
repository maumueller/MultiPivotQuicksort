    // Automatically generated by invoking
    // ruby gen_k_pivot_algorithm.rb with parameters
    //  5 0 0 0 0 0 0 
    #include <algorithm>

    namespace qsort5000000{

    template <typename Iterator>
    void sort(Iterator left, Iterator right)
    {
        typedef typename std::iterator_traits<Iterator>::value_type value_type;
        if (right - left < 500)
        {
            qsort3::three_pivot(left, right);
        }
        else
        {
        networks::sort5(*(left +  0), *(left +  1), *(left +  2), *(right - 1), *(right - 0));

        value_type p1 = *(left + 0);
        value_type p2 = *(left + 1);
        value_type p3 = *(left + 2);
        value_type p4 = *(right - 1);
        value_type p5 = *(right - 0);

        Iterator g1 = left + 3;
        Iterator g2 = left + 3;
        Iterator g4 = right - 2;
        Iterator g3 = right - 2;

        Iterator i = left + 3;
        Iterator j = right - 2;

        while (i <= j)
        {
            while (*i < p3)
            {
                if (*i > p2)
                {
                    i++; 
                }
                else
                {
                    if (*i > p1)
                    {
                        rotations::rotate2(*i, *g2);
                        i++; g2++; 
                    }
                    else
                    {
                            rotations::rotate3(*i, *g2, *g1);
                            i++; g2++; g1++; 
                    }
                }
            }
            while (*j > p3)
            {
                if (*j < p4)
                {
                    j--; 
                }
                else
                {
                    if (*j < p5)
                    {
                        rotations::rotate2(*j, *g3);
                        j--; g3--; 
                    }
                    else
                    {
                            rotations::rotate3(*j, *g3, *g4);
                            j--; g3--; g4--; 
                    }
                }
            }
            if (i <= j)
            {
                if (*i < p4)
                {
                    if (*j > p2)
                    {
                        // rotate a3 and a2 elements
                        rotations::rotate2(*i, *j);
                        i++, j--;
                    }
                    else
                    {
                        if (*j > p1)
                        {
                            // rotate a3 and a1 elements
                            rotations::rotate3(*i, *g2, *j);
                            i++, j--, g2++;
                        }
                        else
                        {
                            // rotate a3 and a0 elements
                            rotations::rotate4(*i, *g2, *g1, *j);
                            i++, j--, g2++, g1++;
                        }
                    }
                }
                else
                {
                    if (*i < p5)
                    {
                        if (*j > p2)
                        {
                            // rotate a4 and a2 elements
                            rotations::rotate3(*i, *j, *g3);
                            i++, j--, g3--;
                        }
                        else
                        {
                            if (*j > p1)
                            {
                                // rotate a4 and a1 elements
                                rotations::rotate4(*i, *g2, *j, *g3);
                                i++, j--, g2++, g3--;
                            }
                            else
                            {
                                // rotate a4 and a0 elements
                                rotations::rotate5(*i, *g2, *g1, *j, *g3);
                                i++, j--, g2++, g1++, g3--;
                            }
                        }
                    }
                    else
                    {
                        if (*j > p2)
                        {
                            // rotate a5 and a2 elements
                            rotations::rotate4(*i, *j, *g3, *g4);
                            i++, j--, g3--, g4--;
                        }
                        else
                        {
                            if (*j > p1)
                            {
                                // rotate a5 and a1 elements
                                rotations::rotate5(*i, *g2, *j, *g3, *g4);
                                i++, j--, g2++, g3--, g4--;
                            }
                            else
                            {
                                // rotate a5 and a0 elements
                                rotations::rotate6(*i, *g2, *g1, *j, *g3, *g4);
                                i++, j--, g2++, g1++, g3--, g4--;
                            }
                        }
                    }
                }
            }
        }
        rotations::rotate4(*(left + 2), *(g1 - 1), *(g2 - 1), *(i - 1));
        rotations::rotate3(*(left + 1), *(g1 - 2), *(g2 - 2));
        rotations::rotate2(*(left + 0), *(g1 - 3));

        rotations::rotate3(*(right - 1), *(g4 + 1), *(g3 + 1));
        rotations::rotate2(*(right - 0), *(g4 + 2));

        sort(left, g1 - 4);
        sort(g1 - 2, g2 - 3);
        sort(g2 - 1, i - 2);
        sort(i - 0, g3 + 0);
        sort(g3 + 2, g4 + 1);
        sort(g4 + 3, right);
    }
}

template <typename ValueType>
void qsort()
{
    assert( g_input_size % sizeof(ValueType) == 0 );

    ValueType* input = (ValueType*)g_input;
    size_t n = g_input_size / sizeof(ValueType);

    sort(input, input + n - 1);
}

CONTESTANT_REGISTER_ALL(qsort, "qsort5000000", "Quicksort, 5 pivots");

} // namespace
